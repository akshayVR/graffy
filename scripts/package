#!/usr/bin/env node
/* eslint-disable no-console */

const { mkdir } = require('fs').promises;
const { sync: rimraf } = require('rimraf');
const globby = require('globby');
const argv = require('yargs')
  .usage('$0 <version> [--publish] [--link]')
  .boolean('publish')
  .boolean('link')
  .demandCommand(1).argv;

const version = require('./version.js');
const build = require('./build.js');
const publish = require('./publish.js');
const link = require('./link.js');
const interlink = require('./interlink.js');
const tag = require('./tag.js');
const { src, dst, npx } = require('./utils.js');

// const { printUnused } = require('./deps.js');

(async function () {
  const ver = await version(argv._[0]);
  console.log('Building version', ver);

  await rimraf(dst());
  await mkdir(dst());

  console.log('Generating typescript definition files...');
  await npx('tsc');
  await npx('tsc', '-p', 'tsconfig-cjs.json');

  let dirs = await globby('*', { cwd: src(), onlyDirectories: true });
  dirs = (
    await Promise.all(
      dirs.map(async (dir) => {
        if (!(await build(dir, ver))) return;
        await npx('merge-dirs', dst('types', 'esm', dir), dst(dir, 'esm'), '--overwrite');
        await npx('merge-dirs', dst('types', 'cjs', dir), dst(dir, 'cjs'), '--overwrite');
        if (argv.publish) await publish(dir, ver);
        if (argv.link) await link(dir);
        return dir;
      }),
    )
  ).filter(Boolean);

  if (argv.link) await Promise.all(dirs.map((dir) => interlink(dir)));
  if (argv.publish) tag(ver);
  rimraf(dst('types'));

  console.log('Done.');
  // printUnused();
})();
